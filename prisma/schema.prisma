generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  telegramId       Int          @unique
  username         String?
  isAdmin          Boolean      @default(false)
  createdAt        DateTime     @default(now())
  submissions      Submission[] // all submissions of the user
  lastSubmission   Submission?  @relation("LastSubmission", fields: [lastSubmissionId], references: [id])
  lastSubmissionId Int?         @unique
  reputation       Reputation? // back-relation to Reputation
}

model Question {
  id           Int      @id @default(autoincrement())
  key          String   @unique
  text         String
  confidential Boolean  @default(false)
  category     String // 'personal' or 'partner'
  answers      Answer[] // back-relation to Answer
}

model Submission {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers          Answer[]
  status           String   @default("pending") // 'pending', 'approved', 'rejected'
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastSubmissionOf User?    @relation("LastSubmission") // back-relation for lastSubmission
}

model Answer {
  id           Int        @id @default(autoincrement())
  submissionId Int
  questionId   Int
  answer       String
  submission   Submission @relation(fields: [submissionId], references: [id])
  question     Question   @relation(fields: [questionId], references: [id])
}

model Reputation {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  score  Int  @default(0)
  user   User @relation(fields: [userId], references: [id])
}
